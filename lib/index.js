// Generated by CoffeeScript 1.6.3
var Cache, redis;

redis = require('redis');

module.exports = Cache = (function() {
  function Cache(key, auto_update, update_callback) {
    var ps,
      _this = this;
    this.key = key;
    if (Cache.RedisIn == null) {
      Cache.RedisIn = redis.createClient();
    }
    if (Cache.RedisOut == null) {
      Cache.RedisOut = redis.createClient();
    }
    ps = Cache.RedisIn;
    ps.subscribe("dcache:" + this.key);
    ps.on("message", function(channel, message) {
      if (channel === ("dcache:" + _this.key)) {
        if (message.toString() === "1") {
          return _this.stale(false);
        } else {
          return _this.set(JSON.parse(message), false);
        }
      }
    });
    this.data = false;
    this.is_stale = true;
    this.queue = [];
    if (typeof auto_update === 'function') {
      update_callback = auto_update;
      auto_update = true;
    }
    this.auto_update = auto_update;
    this.update_callback = update_callback;
    if (auto_update) {
      this.update(function() {
        return null;
      });
    }
  }

  Cache.prototype.get = function(callback) {
    var _this = this;
    if (!this.is_stale) {
      process.nextTick(function() {
        return callback(null, _this.data);
      });
      return this.data;
    }
    this.update(callback);
    return this.data;
  };

  Cache.prototype.set = function(data, broadcast) {
    if (broadcast == null) {
      broadcast = true;
    }
    this.data = data;
    this.is_stale = false;
    if (broadcast) {
      return Cache.RedisOut.publish("dcache:" + this.key, JSON.stringify(data));
    }
  };

  Cache.prototype.update = function(callback) {
    var _this = this;
    if (this.queue.length === 0) {
      this.update_callback(this.key, function(err, data) {
        var fn, _results;
        if (!err) {
          _this.is_stale = false;
        }
        _this.data = data;
        _results = [];
        while (fn = _this.queue.shift()) {
          if (fn.call) {
            _results.push(fn(err, data));
          }
        }
        return _results;
      });
    }
    return this.queue.push(callback);
  };

  Cache.prototype.stale = function(broadcast) {
    if (broadcast == null) {
      broadcast = true;
    }
    this.is_stale = true;
    if (this.auto_update) {
      this.update(function() {
        return null;
      });
    }
    if (broadcast) {
      return Cache.RedisOut.publish("dcache:" + this.key, 1);
    }
  };

  return Cache;

})();
